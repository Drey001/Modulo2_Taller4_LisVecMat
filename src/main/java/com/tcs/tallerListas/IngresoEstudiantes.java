/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tcs.tallerListas;

import com.tcs.tallerListas.beans.Estudiante;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;


public class IngresoEstudiantes {

	public static void main(String[] args) {

		System.out.println("################ Ingreso de estudiantes ################");
		
		try {
			Scanner data = new Scanner(new File("src/main/resources/data.txt"));
			ArrayList<String[]> array1 = new ArrayList<>();
			ArrayList<Estudiante> estudiantes = new ArrayList<>();
			while (data.hasNextLine()) {
				String[] estData = data.nextLine().split(",");
				Estudiante estudiante = new Estudiante();
				if ( esNumerico(estData[2])) {
					estudiante.setIdentificacion(estData[0]);
					estudiante.setNombre(estData[1]);
					estudiante.setEdad(Double.parseDouble(estData[2]));
					estudiante.setGrado(estData[3]);
					estudiantes.add(estudiante);
				}else {
					System.out.println("Estudiante " + estData[0] + " contiene" +
							"una edad no valida. Registro no creado");
				}
			}
			data.close();


			/* IMPRESION DE ESTADISTICAS */

			ArrayList<Estudiante> estudiantesFiltro= new ArrayList<>();
			// Cantidad de estudiantes
			mostrarCantidadAlumnos(estudiantes);
			// De 6 a 10 años
			estudiantesFiltro = filtrarPorEdad(6, 10,estudiantes);
			imprimirListado(estudiantesFiltro, "Estudiantes de 6 a 10 años");
			// Grado Jardin
			estudiantesFiltro = filtrarPorGrado("Jardin", estudiantes);
			imprimirListado(estudiantesFiltro, "\n Grado Jardin");
			// Grado Primero
			estudiantesFiltro = filtrarPorGrado("Primero", estudiantes);
			imprimirListado(estudiantesFiltro, "\n Grado Primero");
			// Grado Segundo
			estudiantesFiltro = filtrarPorGrado("Segundo", estudiantes);
			imprimirListado(estudiantesFiltro, "\n Grado Segundo");
			// Grado Tercero
			estudiantesFiltro = filtrarPorGrado("Tercero", estudiantes);
			imprimirListado(estudiantesFiltro, "\n Grado Tercero");
			// Grado Cuarto
			estudiantesFiltro = filtrarPorGrado("Cuarto", estudiantes);
			imprimirListado(estudiantesFiltro, "\n Grado Cuarto");
			// Grado Quinto
			estudiantesFiltro = filtrarPorGrado("Quinto", estudiantes);
			imprimirListado(estudiantesFiltro, "\n Grado Quinto");
			// Por tipo de identidad
			estudiantesFiltro = filtrarPorTipoId("TI", estudiantes);
			imprimirEdadGrado(estudiantesFiltro,"\n Estudiantes con TI");

			// IMPRESION CON LOGICA DECLARATIVA **COLLECTIONS**
			System.out.println("\n ************************** \n Filtros aplicados con COLLECTIONS" +
							" \n **************************");
			imprimirList(filtrarPorEdad2(11,12,estudiantes),"filtro DECLARATIVO por Edad");
			imprimirList(filtrarPorGrado2("Jardin",estudiantes),"filtro DECLARATIVO por Grado");
			imprimirList(filtrarPorTipoId2("TI",estudiantes),"Filtro DECLARATIVO por Tipo ID");

			// Prueba COMPARATOR
			List<Estudiante> listado = filtrarPorEdad2(11, 12, estudiantes);
			Collections.sort(listado, new Comparator<Estudiante>() {
				@Override
				public int compare(Estudiante o1, Estudiante o2) {
					String edad1, edad2;
					edad1 = String.valueOf(o1.getEdad());
					edad2 = String.valueOf(o2.getEdad());
					return edad1.compareTo(edad2);
				}
			});

			/* SOLICITUD REPROBADO / APROBADO */
			System.out.println("\n SOLICITUD DE ESTADO ESTUDIANTE \n");
			estudiantesFiltro = setApruebaReprueba(estudiantes);
			// Estudiantes que reprueban
			imprimirListado(estudiantesFiltro,"Estudiantes que reprueban");



		} catch (FileNotFoundException e) {
			System.out.println("File Not Fund");
		}
	}

	private static boolean esNumerico (String cadena){
		try {
			Double.parseDouble(cadena);
			return true;
		} catch (NumberFormatException excepcion) {
			return false;
		}
	}

	private static void mostrarCantidadAlumnos(ArrayList<Estudiante> estudiantes){
		System.out.println("Número de estudiantes: " + estudiantes.size());
	}

	// Filro convencional con lógica IMPERATIVA
	private static ArrayList<Estudiante> filtrarPorEdad(int edad1, int edad2,
														ArrayList<Estudiante> estudiantes){
		ArrayList<Estudiante> estudiantesEdad = new ArrayList<>();
		for (int i=0; i< estudiantes.size(); i++){
			if (( edad1<= estudiantes.get(i).getEdad()) && ( estudiantes.get(i).getEdad() <= edad2)) {
				estudiantesEdad.add(estudiantes.get(i));
			}
		}
		return estudiantesEdad;
	}

	// Filtro con lógica DECLARATIVA
	private static List<Estudiante> filtrarPorEdad2(int edad1, int edad2,
														ArrayList<Estudiante> estudiantes){
		Predicate<Estudiante> byEdad = estudiante -> ( estudiante.getEdad() >= edad1 ) &&
				( estudiante.getEdad()<= edad2 );
		List<Estudiante> resultado = estudiantes.stream().filter(byEdad).collect(Collectors.toList());
		return resultado;
	}

	// Filtro con lógica IMPERATIVA
	private static ArrayList<Estudiante> filtrarPorGrado(String grado,
														ArrayList<Estudiante> estudiantes){
		ArrayList<Estudiante> estudiantesGrado = new ArrayList<>();
		for ( int i=0; i< estudiantes.size(); i++){
			if (estudiantes.get(i).getGrado().equals(grado)){
				estudiantesGrado.add(estudiantes.get(i));
			}
		}
		return estudiantesGrado;
	}

	// Filtro con lógica DECLARATIVA
	private static List<Estudiante> filtrarPorGrado2(String grado, ArrayList<Estudiante> estudiantes){
		Predicate<Estudiante> byGrado = estudiante -> estudiante.getGrado().equals(grado);
		List<Estudiante> resultado = estudiantes.stream().filter(byGrado).collect(Collectors.toList());
		return resultado;
	}

	private static ArrayList<Estudiante> filtrarPorTipoId(String tipo,
														  ArrayList<Estudiante> estudiantes){
		ArrayList<Estudiante> estudiantesTipoId = new ArrayList<>();
		for (int i=0; i< estudiantes.size(); i++){
			if (estudiantes.get(i).getIdentificacion().substring(0,2).equals(tipo))
				estudiantesTipoId.add(estudiantes.get(i));
		}
		return estudiantesTipoId;
	}

	// Filtro con lógica DECLARATIVA
	private static List<Estudiante> filtrarPorTipoId2(String tipo, ArrayList<Estudiante> estudiantes){
		Predicate<Estudiante> byTipoId = estudiante -> estudiante.getIdentificacion().
				substring(0,2).equals(tipo);
		List<Estudiante> resultado = estudiantes.stream().filter(byTipoId).collect(Collectors.toList());
		return resultado;
	}

	private static void imprimirListado(ArrayList<Estudiante> estudiantes, String texto){
		System.out.println("\n" + texto + "\n");
		if  (estudiantes.isEmpty()){
			System.out.println("No hay información \n");
		}else{
			for (int i=0; i<estudiantes.size();i++) {
				System.out.println(estudiantes.get(i).toString());
			}
		}
	}

	private static void imprimirList(List<Estudiante> estudiantes, String texto){
		System.out.println("\n" + texto + "\n");
		if  (estudiantes.isEmpty()){
			System.out.println("No hay información \n");
		}else{
			for (int i=0; i<estudiantes.size();i++) {
				System.out.println(estudiantes.get(i).toString());
			}
		}
	}

	private static void imprimirEdadGrado(ArrayList<Estudiante> estudiantes, String texto){
		System.out.println(texto + "\n");
		if  (estudiantes.isEmpty()){
			System.out.println("No hay información \n");
		}else{
			for (int i=0; i<estudiantes.size();i++) {
				System.out.println("Identificación: " + estudiantes.get(i).getIdentificacion() +
						"|  Edad: " + estudiantes.get(i).getEdad() +
						"|  Grado: " + estudiantes.get(i).getGrado());
			}
		}
	}

	private static ArrayList<Estudiante> setApruebaReprueba(ArrayList<Estudiante> estudiantes){
		ArrayList<Estudiante> estudiantesReprueban = new ArrayList<>();
		char [] resultado = new char [estudiantes.size()];
		Scanner in = new Scanner(System.in);
		for (int i=0; i<estudiantes.size(); i++){
			System.out.println(estudiantes.get(i).toString() + "\n Estudiante Aprueba (A) o" +
					" Reprueba (R)");
			char resul = in.nextLine().charAt(0);
			resultado[i] = resul;
			if (resul == 'R' || resul == 'r')
				estudiantesReprueban.add(estudiantes.get(i));
		}
		escribirArchivo(estudiantes,resultado);
		return estudiantesReprueban;
	}

	private static void escribirArchivo (ArrayList<Estudiante> estudiantes,
										 char[] result){
		try {
			FileWriter salida = new FileWriter("src/main/resources/dataOut.txt");
			for (int i=0; i<estudiantes.size(); i++){
				salida.write(estudiantes.get(i).getIdentificacion()+","+
						estudiantes.get(i).getNombre()+","+
						estudiantes.get(i).getEdad()+","+
						estudiantes.get(i).getGrado()+","+
						result[i] + "\n"
				);
			}
			salida.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
